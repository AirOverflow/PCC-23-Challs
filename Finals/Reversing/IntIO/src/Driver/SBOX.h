#pragma once
#include "common.h"

const int SBOX_SIZE = 91;
const int SBOX_ROWS = 2;

char sbox[SBOX_SIZE][SBOX_ROWS] = { {'0', 0xc}, {'1', 0x89}, {'2', 0xaa}, {'3', 0x12}, {'4', 0x4a}, {'5', 0x5e}, {'6', 0x59}, {'7', 0x8f}, {'8', 0x55}, {'9', 0x1d}, {'a', 0xd1}, {'b', 0xe9}, {'c', 0x57}, {'d', 0x6e}, {'e', 0xcd}, {'f', 0xa7}, {'g', 0xf9}, {'h', 0x37}, {'i', 0xd3}, {'j', 0x63}, {'k', 0x9b}, {'l', 0xd5}, {'m', 0x58}, {'n', 0x45}, {'o', 0xc5}, {'p', 0xd6}, {'q', 0x4}, {'r', 0xd9}, {'s', 0x7e}, {'t', 0x4e}, {'u', 0xc2}, {'v', 0xa5}, {'w', 0xdd}, {'x', 0x5b}, {'y', 0x93}, {'z', 0x84}, {'A', 0xde}, {'B', 0x7}, {'C', 0x10}, {'D', 0xa}, {'E', 0x46}, {'F', 0xb6}, {'G', 0xe0}, {'H', 0xd0}, {'I', 0x9d}, {'J', 0xa0}, {'K', 0x3e}, {'L', 0x50}, {'M', 0x6c}, {'N', 0x62}, {'O', 0x8b}, {'P', 0xf}, {'Q', 0x44}, {'R', 0xc1}, {'S', 0x1c}, {'T', 0x39}, {'U', 0x94}, {'V', 0xac}, {'W', 0x1e}, {'X', 0xcb}, {'Y', 0x90}, {'Z', 0x95}, {'!', 0xfb}, {'\'',0xd8}, {'#', 0x6}, {'$', 0x79}, {'%', 0xb0}, {'&', 0xea}, {'(', 0xe2}, {')', 0x54}, {'*', 0x17}, {'+', 0x35}, {'-', 0x11}, {'.', 0xe7}, {'/', 0x26}, {';', 0x60}, {'<', 0xf4}, {'=', 0xcf}, {'>', 0x2}, {'?', 0xf7}, {'@', 0x74}, {'{', 0x1a}, {'\\',0xaf}, {'}', 0xb9}, {'^', 0x96}, {'_', 0x64}, {'`', 0xfe}, {'{', 0x9}, {'|', 0xa3}, {'}', 0x5f}, {'~', 0xb7} };

typedef struct {
	size_t row;
	size_t col;
} item;

item get_sbox_value(char _chr) {
	item result;
	result.row = -1;
	result.col = -1;

	for (int i = 0; i < SBOX_SIZE; i++) {
		if (sbox[i][0] == _chr) {
			INFO("Found: %c at %d", sbox[i][0], i);
			result.row = i;
			result.col = sbox[i][1];
			break;
		}
	}
	return result;
}

item reverse_sbox_lookup(int _v) {
	item result;
	result.row = -1;
	result.col = -1;

	for (int i = 0; i < SBOX_SIZE; i++) {
		if (sbox[i][1] == _v) {
			result.row = i;
			result.col = sbox[i][0];
			break;
		}
	}
	return result;
}

CHAR* decrypt(const char* str, int size) {
	CHAR result[48];
	for (int i = 0; i < size; i++) {
		item sbox_value = reverse_sbox_lookup(str[i]);
		if (sbox_value.row != -1) {
			result[i] = sbox_value.col;
		}
		else {
			result[i] = str[i];
		}
	}
	for(int i = 0; i < size; i++)
		MESSAGE("%c", result[i])
	return result;
}

const CHAR flag[48] = {
		0xf, 0x10, 0x10, 0x1a, 0xffffffdd, 0x12, 0xffffffd5, 0xffffffd5, 0x64, 0xffffffd1, 0xffffffd5, 0xffffffd5, 0x64, 0xffffff93, 0xc, 0xffffffc2, 0x64, 0x37, 0x4a, 0x6e, 0x64, 0x4e, 0xc, 0x64, 0x6e, 0xc, 0x64, 0xffffffdd, 0x4a, 0x7e, 0x64, 0xffffffd5, 0xc, 0xffffffd1, 0x6e, 0x64, 0x4e, 0x37, 0x12, 0x64, 0x6e, 0xffffffd9, 0xffffff89, 0xffffffa5, 0x12, 0xffffffd9, 0xffffffb9, 0x00
};

char* actual_decrypt() {
	return decrypt(flag, 48);
}